(define (let? exp)
  (eq? (car exp) 'let))
(define (let-parameters exp)
  (cadr exp))
(define (let-body exp)
  (caddr exp))
(define (named-let? exp)
  (and (let? exp)
       (symbol? (cadr exp))))
(define (named-let-name exp)
  (cadr exp))
(define (named-let-parameters exp)
  (caddr exp))
(define (named-let-body exp)
  (cddr exp))
(define (make-single-binding var val)
  (list var val))
(define (named-let->combination exp)
  (let ((name (named-let-name exp))
        (parameters (named-let-parameters exp))
        (body (named-let-body exp)))
    (list 'let
          (make-single-binding name '(quote *unassigned*))
          (make-assignment
            name
            (make-lambda (map car parameters) body)
          (cons name (map cadr parameters))))))
(define (unnamed-let->combination exp)
  (let ((parameters (let-parameters exp))
        (body (let-body exp)))
    (cons (make-lambda (map car parameters)
                       body)
          (map cadr parameters))))
(define (let->combination exp)
  (if (named-let? exp)
    (named-let->combination exp)
    (unnamed-let->combination exp)))
