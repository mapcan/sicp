(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        ((exponential? exp)
         (let ((b (base exp))
               (p (exponent exp)))
            (let ((q (make-product p (make-exponential b (- p 1)))))
              (make-product q (deriv b var)))))
        (else
          (error "unknown expression type -- DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (strip sequence)
  (if (null? (cdr sequence))
    (car sequence)
    sequence))

(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))
(define (augend s) (strip (cddr s)))
(define (addend s) (car s))

;(define (make-sum . a)
;  (accumulate (lambda (x y)
;                (cond ((=number? x 0) y)
;                      ((=number? y 0) x)
;                      ((and (number? x) (number? y)) (+ x y))
;                      ((and (number? x) (pair? y) (number? (car y)))
;                       (append (list (+ x (car y)) '+) (cddr y)))
;                      (else (append (list x '+) (if (pair? y) y (cons y '()))))))
;              0
;              a))
;(make-sum 'x 1 9 1)
;(make-sum 'x 1 9 'y 'z)
;(make-sum 'x 1 9 'y)
;(make-sum 'x)
;(make-sum 1)
;(make-sum 1 'x)
;(make-sum 'x 1)
;(make-sum 1 2)
;(make-sum 1 0)

;(define (make-product . m)
;  (accumulate (lambda (x y)
;                (cond ((or (=number? x 0) (=number? y 0)) 0)
;                      ((=number? x 1) y)
;                      ((=number? y 1) x)
;                      ((and (number? x) (number? y)) (* x y))
;                      ((and (number? x) (pair? y) (number? (car y)))
;                       (append (list (* x (car y)) '*) (cddr y)))
;                      (else (append (list x '*) (if (pair? y) y (cons y '()))))))
;              1
;              m))
;(make-product 'x 'y 'z)
;(make-product 'x 1)
;(make-product 'x 0 'y)
;(make-product 'x 1 2 3 'y 'z)
;(make-product 'x 1 2 3 'y 'z 0)

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (multiplicand p) (strip (cddr p)))
(define (multiplier p) (car p))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))

(define (exponential? e)
  (and (pair? e) (eq? (cadr e) '**)))
(define (make-exponential base exponent)
  (cond ((=number? base 0) 0)
        ((=number? base 1) 1)
        ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        (else (list base '** exponent))))
(define (base e) (car e))
(define (exponent e) (caddr e))

(deriv '(x + 3) 'x)
(deriv '(x * y) 'x)
(deriv '((x * y) * (x + 3)) 'x)
(deriv '(x ** 3) 'x)
(deriv '(x ** 1) 'x)
(deriv '(x + y + x) 'x)
(deriv '(x + (3 * (x + (y + 2)))) 'x)
(deriv '(x + 3 * (x + y + 2)) 'x)
